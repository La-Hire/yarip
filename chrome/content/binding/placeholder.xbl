<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2007-2012 Kim A. Brandt <kimabrandt@gmx.de>

    This file is part of yarip.

    Yarip is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    Yarip is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with yarip.  If not, see <http://www.gnu.org/licenses/>.
-->
<!DOCTYPE bindings>
<bindings xmlns="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml">
  <binding id="replace">
    <implementation>
      <constructor><![CDATA[
          if (this.placeholder) return;
          else this.placeholder = true;

          if (!("getAttribute" in this)) return;
          if (!this.localName) return;

          document.normalize();

          var parent = this.parentNode;
          var next = this.nextSibling;
          var localName = this.localName.toLowerCase();

          if (this.ownerDocument instanceof Components.interfaces.nsIDOMXULDocument) return;
//          if (/\b(whitelisted|blacklisted|placeholder)\b/.test(this.getAttribute("status"))) return;
          if (/\b(whitelisted|blacklisted)\b/.test(this.getAttribute("status"))) return;
          if (next && "getAttribute" in next && next.getAttribute("class") == "placeholder" && next.getAttribute("status") == "whitelisted") return;

          if (/^(audio|embed|iframe|video)$/i.test(localName)) {
              if (/^(audio|video)$/i.test(localName)) {
                  this.addEventListener("playing", this.pause, false);
                  this.pause(); // prevent autostart
              }

              if (this.src /*|| /^iframe$/i.test(localName)*/) {
                  this.setAttribute("src_backup", this.src);
                  this.src = "";
              }

              if (/^(audio|embed|video)$/i.test(localName)) {
//                  var es = document.evaluate(".//embed | .//object | .//source", this, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                  var es = document.evaluate(".//embed | .//object", this, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                  for (var i = 0; i < es.snapshotLength; i++) {
                      var child = es.snapshotItem(i);
                      if (child.src) {
                          child.setAttribute("src_backup", child.src);
                          child.src = "";
                      } else if (child.data) {
                          child.setAttribute("data_backup", child.data);
                          child.data = "";
                      }
                  }
              }
          } else if (/^object$/i.test(localName)) {
              if (this.data) {
                  this.setAttribute("data_backup", this.data);
                  this.data = "";
              }
          }

          var parentCs = document.defaultView.getComputedStyle(parent, null);
          var parentCssWidth = parentCs && parentCs.getPropertyValue("width") || null;
          var parentCssHeight = parentCs && parentCs.getPropertyValue("height") || null;
          var cs = document.defaultView.getComputedStyle(this, null);
          var cssWidth = cs && cs.getPropertyValue("width") || null;
          var cssHeight = cs && cs.getPropertyValue("height") || null;
          var attrWidth = this.getAttribute("width") || null;
          var attrHeight = this.getAttribute("height") || null;

          var goodMeasureRegExp = /^\d+(px)?$/;
          var width = !goodMeasureRegExp.test(cssWidth) && attrWidth || cssWidth;
          var height = !goodMeasureRegExp.test(cssHeight) && attrHeight || cssHeight;
          var badMeasureRegExp = /^\dpx$/;
          if (!width || !height || badMeasureRegExp.test(width) || badMeasureRegExp.test(height)) return;

          var DEFAULT = "auto";

          // Preparing style of placeholder
          switch (localName) {
          case "iframe":
              if (width == "auto" && height == "auto" && (/^body$/i.test(parent.localName) || /^body$/i.test(parent.parentNode.localName))) {
                return;
              } else {
                DEFAULT = "100%";
              }
              break;
          default:
              if (width == "auto" && height == "auto" && /^\d+px$/.test(parentCssWidth) && /^\d+px$/.test(parentCssHeight)) {
                width = "100%";
                height = "100%";
              }
              break;
          }

          var smallMeasureRegExp = /^[12]?\d(px)?$/;
          var digitsRegExp = /^\d+$/;
          if (smallMeasureRegExp.test(width)) {
              width = DEFAULT;
          } else if (digitsRegExp.test(width)) {
              width = parseInt(width) > 0 ? width + "px" : DEFAULT;
          }

          if (smallMeasureRegExp.test(height)) {
              height = DEFAULT;
          } else if (digitsRegExp.test(height)) {
              height = parseInt(height) > 0 ? height + "px" : DEFAULT;
          }

          // Creating cell and placeholder.
          var button = document.createElement("input");
          button.setAttribute("status", "whitelisted");
          button.setAttribute("type", "button");
          button.setAttribute("value", localName.toUpperCase());
          button.setAttribute("style",
              " float: none !important;" +
              " font-weight: bold;" +
              " height: 100% !important;" +
              " margin: 0px !important;" +
              " opacity: 0.6 !important;" +
              " padding: 0px !important;" +
              " width: 100% !important;"
          );
          var cell = document.createElement("div");
          cell.align = "center";
          cell.setAttribute("class", "placeholder-cell");
          cell.setAttribute("status", "whitelisted");
          cell.setAttribute("style",
              "display: table-cell !important;" +
              " float: none !important;" +
              " height: 100% !important;" +
              " margin: 0px !important;" +
              " padding: 0px !important;" +
              " text-align: " + (cs.getPropertyValue("text-align") || "center") + " !important;" +
              " vertical-align: middle !important;" +
              " width: 100% !important;"
          );
          cell.appendChild(button);
          var placeholder = document.createElement("div");
          placeholder.setAttribute("class", "placeholder");
          placeholder.setAttribute("status", "whitelisted");
          placeholder.setAttribute("style",
//              "display: " + (cs.getPropertyValue("display") || "inline-table") + " !important;" +
//              "display: inline-table !important;" +
              "display: inline-table;" +
              " float: " + (cs.getPropertyValue("float") || "none") + " !important;" +
              " height: " + height + " !important;" +
              " margin-bottom: " + (cs.getPropertyValue("margin-bottom") || "auto") + " !important;" +
              " margin-left: " + (cs.getPropertyValue("margin-left") || "auto") + " !important;" +
              " margin-right: " + (cs.getPropertyValue("margin-right") || "auto") + " !important;" +
              " margin-top: " + (cs.getPropertyValue("margin-top") || "auto") + " !important;" +
              " position: " + (cs.getPropertyValue("position") || "inherit") + " !important;" +
              " width: " + width + " !important;"
          );
          placeholder.appendChild(cell);
////          if (!/\bplaceholder\b/.test(this.getAttribute("status"))) {
//              this.setAttribute("status", "placeholder blacklisted");
////          } else {
////              this.setAttribute("status", "placeholder blacklisted");
////          }
          parent.insertBefore(placeholder, next);

          // Adding `show'-function to element.
          var show = function(event, placeholder, element)
          {
              event.preventDefault();

//              switch (localName) {
//              case "audio":
//              case "video":
//                  element.removeEventListener("playing", element.pause, false);
//                  element.play(); // autostart
//                  break;
//              case "object":
//                  // Whitelisting child elements.
//                  es = document.evaluate(".//embed | .//object", element, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
//                  for (var i = 0; i < es.snapshotLength; i++) {
//                      es.snapshotItem(i).setAttribute("status", "whitelisted");
//                  }
//                  break;
//              }
              if (/^(audio|embed|video)$/i.test(localName)) {
                  if (/^embed$/i.test(localName)) element.setAttribute("autostart", "true");
                  if (element.getAttribute("src_backup")) {
                      element.src = element.getAttribute("src_backup");
                      element.removeAttribute("src_backup");
                  }
//                  var es = document.evaluate(".//embed | .//object | .//source", element, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                  var es = document.evaluate(".//embed | .//object", element, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                  for (var i = 0; i < es.snapshotLength; i++) {
                      var child = es.snapshotItem(i);
                      if (child.getAttribute("src_backup")) {
                          child.src = child.getAttribute("src_backup");
                          child.removeAttribute("src_backup");
                      } else if (child.getAttribute("data_backup")) {
                          child.data = child.getAttribute("data_backup");
                          child.removeAttribute("data_backup");
                      }
                  }
                  if (/^(audio|video)$/i.test(localName)) {
                      element.removeEventListener("playing", element.pause, false);
                      element.play(); // autostart
                  }
              } else if (/^iframe$/i.test(localName)) {
                  var src = element.contentDocument.location.href;
//                  var src = element.contentWindow.location.href;
                  if (src && src != "about:blank") {
                      element.src = src;
                  } else if (element.getAttribute("src_backup")) {
                      element.src = element.getAttribute("src_backup");
                  }
                  element.removeAttribute("src_backup");
              } else if (/^object$/i.test(localName)) {
                  if (element.getAttribute("data_backup")) {
                      element.data = element.getAttribute("data_backup");
                      element.removeAttribute("data_backup");
                  }
                  // Whitelisting child embed/object elements.
                  var es = document.evaluate(".//embed | .//object", element, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                  for (var i = 0; i < es.snapshotLength; i++) {
                      es.snapshotItem(i).setAttribute("status", "whitelisted");
                  }
              }

              element.setAttribute("status", "whitelisted");
          };
          var element_ref = this;
          button.addEventListener("click", function(event) { show(event, placeholder, element_ref); }, true);

          // Adding `update'-function to element.
          var update = function(event, placeholder, element)
          {
              switch (event.attrName) {
              case "height":
                  var height = event.newValue;
                  if (!smallMeasureRegExp.test(height)) {
                      if (digitsRegExp.test(height)) {
                          height = parseInt(height) > 0 ? height + "px" : DEFAULT;
                      }
                      placeholder.style.height = height;
                  }
                  break;
              case "width":
                  var width = event.newValue;
                  if (!smallMeasureRegExp.test(width)) {
                      if (digitsRegExp.test(width)) {
                          width = parseInt(width) > 0 ? width + "px" : DEFAULT;
                      }
                      placeholder.style.width = width;
                  }
                  break;
              }
          }
          this.addEventListener("DOMAttrModified", function(event) { update(event, placeholder, element_ref); }, false);

          this.setAttribute("status", "placeholder blacklisted");

          // Whitelist the body.
          if (/^body$/i.test(parent.localName) && parent.getAttribute("status") != "whitelisted") {
              parent.setAttribute("status", "whitelisted");
          }
      ]]></constructor>
    </implementation>
  </binding>
</bindings>
