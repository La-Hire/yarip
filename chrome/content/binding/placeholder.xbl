<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2007-2010 Kim A. Brandt <kimabrandt@gmx.de>

This file is part of yarip.

Yarip is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Yarip is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with yarip; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<!DOCTYPE bindings>
<bindings xmlns="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml">
  <binding id="replace">
    <implementation>
      <constructor><![CDATA[
        document.normalize();

        var parent = this.parentNode;
        var next = this.nextSibling;
        var localName = this.localName.toLowerCase();

        if (this.ownerDocument instanceof Components.interfaces.nsIDOMXULDocument) return;
//        if (parent && /^body|object$/i.test(parent.localName) && !/^embed$/.test(localName)) return;
//        if (/\b(whitelisted|blacklisted|prefswitch)\b/.test(this.getAttribute("status"))) return;
        if (/\b(whitelisted|blacklisted)\b/.test(this.getAttribute("status"))) return;
        if (next && next.getAttribute && next.getAttribute("class") == "placeholder" && next.getAttribute("status") == "whitelisted") return;

        switch (localName) {
//        case "iframe":
//          this.placeholder_src_backup = this.src;
//          this.src = "";
//          break;
        case "audio":
        case "video":
          this.addEventListener("playing", this.pause, false);
          this.pause();
          this.placeholder_src_backup = this.src;
          this.src = "";
          break;
        }

//        var DEFAULT_WIDTH = "auto";
        var DEFAULT_WIDTH = "100%";
        var DEFAULT_HEIGHT = "100%";
        var cs = document.defaultView.getComputedStyle(this, null);
        var rect = this.getBoundingClientRect();
        var width = DEFAULT_WIDTH;
        var height = DEFAULT_HEIGHT;
        var cssWidth = cs.getPropertyValue("width") ? cs.getPropertyValue("width") : "auto";
        var cssHeight = cs.getPropertyValue("height") ? cs.getPropertyValue("height") : "auto";
        var attrWidth = this.getAttribute("width") ? this.getAttribute("width") : "auto";
        var attrHeight = this.getAttribute("height") ? this.getAttribute("height") : "auto";
        var rectWidth = rect.width;
        var rectHeight = rect.height;

        width = cssWidth ? cssWidth : width;
        height = cssHeight ? cssHeight : height;

        var goodMeasureRegExp = /^\d+(px)?$/;
        if (!goodMeasureRegExp.test(width)) width = attrWidth ? attrWidth : width;
        if (!goodMeasureRegExp.test(height)) height = attrHeight ? attrHeight : height;

        if (!goodMeasureRegExp.test(width)) width = rectWidth > 0 ? rectWidth : width;
        if (!goodMeasureRegExp.test(height)) height = rectHeight > 0 ? rectHeight : height;

        var smallMeasureRegExp = /^[12]?\d(px)?$/;
        var digitsRegExp = /^\d+$/;
        if (smallMeasureRegExp.test(width)) width = DEFAULT_WIDTH;
        else if (digitsRegExp.test(width)) width = parseInt(width) > 0 ? width + "px" : DEFAULT_WIDTH;

        if (smallMeasureRegExp.test(height)) height = DEFAULT_HEIGHT;
        else if (digitsRegExp.test(height)) height = parseInt(height) > 0 ? height + "px" : DEFAULT_HEIGHT;

        var display =  cs.getPropertyValue("display") ? cs.getPropertyValue("display") : "inline-table";
        var float = cs.getPropertyValue("float") ? cs.getPropertyValue("float") : "none";
        var marginBottom = cs.getPropertyValue("margin-bottom") ? cs.getPropertyValue("margin-bottom") : "auto";
        var marginLeft = cs.getPropertyValue("margin-left") ? cs.getPropertyValue("margin-left") : "auto";
        var marginRight = cs.getPropertyValue("margin-right") ? cs.getPropertyValue("margin-right") : "auto";
        var marginTop = cs.getPropertyValue("margin-top") ? cs.getPropertyValue("margin-top") : "auto";
        var position = cs.getPropertyValue("position") ? cs.getPropertyValue("position") : "inherit";
        var textAlign = cs.getPropertyValue("text-align") ? cs.getPropertyValue("text-align") : "center";

        this.setAttribute("status", "placeholder blacklisted");

        // Creating cell and placeholder.
        var button = document.createElement("input");
        button.setAttribute("status", "whitelisted");
        button.setAttribute("type", "button");
        button.setAttribute("value", this.tagName.toUpperCase());
        button.setAttribute("style",
          "float: none !important;" +
          " font-size: 12px !important;" +
          " font-weight: bold !important;" +
          " height: 100% !important;" +
          " margin: 0px !important;" +
          " padding: 0px !important;" +
          " width: 100% !important;"
          );
        var cell = document.createElement("div");
        cell.align = "center";
        cell.setAttribute("class", "placeholder-cell");
        cell.setAttribute("status", "whitelisted");
        cell.setAttribute("style",
          "display: table-cell !important;" +
          " float: none !important;" +
          " height: 100% !important;" +
          " margin: 0px !important;" +
          " padding: 0px !important;" +
          " text-align: " + textAlign + " !important;" +
          " vertical-align: middle !important;" +
          " width: 100% !important;"
          );
        cell.appendChild(button);
        var placeholder = document.createElement("div");
        placeholder.setAttribute("class", "placeholder");
        placeholder.setAttribute("status", "whitelisted");
        placeholder.setAttribute("style",
          "display: " + display + " !important;" +
          " float: " + float + " !important;" +
          " height: " + height + " !important;" +
          " margin-bottom: " + marginBottom + " !important;" +
          " margin-left: " + marginLeft + " !important;" +
          " margin-right: " + marginRight + " !important;" +
          " margin-top: " + marginTop + " !important;" +
          " position: " + position + " !important;" +
          " width: " + width + " !important;"
          );
        placeholder.appendChild(cell);
        parent.insertBefore(placeholder, next);

        var element = this;
        var show = function(placeholder, element) {
          placeholder.setAttribute("style", "display: none !important;");

          switch (element.tagName.toLowerCase()) {
          case "object":
            // Whitelisting child embed/object elements.
            var es = document.evaluate(".//embed | .//object", element, null, Components.interfaces.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            for (var i = 0; i < es.snapshotLength; i++) es.snapshotItem(i).setAttribute("status", "whitelisted");
            break;
//          case "iframe":
//            element.src = element.placeholder_src_backup;
//            break;
          case "audio":
          case "video":
            element.removeEventListener("playing", element.pause, false);
            element.src = element.placeholder_src_backup;
            break;
          }

          element.setAttribute("status", "whitelisted forced");
        };
        button.addEventListener("click", function() { show(placeholder, element); }, false);

//        if (/^body$/i.test(this.parentNode.localName) && /^(embed|object|video)$/i.test(this.localName)) {
//          this.parentNode.setAttribute("status", "whitelisted");
//        }
      ]]></constructor>
    </implementation>
  </binding>
</bindings>
